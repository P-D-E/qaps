#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Sep 24, 2019 07:18:26 PM CEST  platform: Linux

# Copyright (c) 2019 Paolo D'Emilio
#
# This file is part of Qaps.
#
# Qaps is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Qaps is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Qaps.  If not, see <https://www.gnu.org/licenses/>.

try:
    import Tkinter as tk
    import tkFileDialog as filedialog, tkMessageBox as messagebox
except ImportError:
    import tkinter as tk
    from tkinter import filedialog, messagebox

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from qaps_common import MyFrame as MyBaseFrame

w = None
root = None
top_level = None
q = None


class MyTkFrame(MyBaseFrame):
    def init_tree(self, gui_tree):
        if gui_tree.exists("root"):
            gui_tree.delete("root")
        w_root = gui_tree.insert("", 0, iid="root", text="Tracks / Buses", open=True)
        return w_root

    def finalize_tree(self, gui_tree):
        for track in gui_tree.get_children("root"):
            gui_tree.item(track, open=False)
        pass

    def append_item(self, gui_tree, parent, text, tag=None):
        new_item = gui_tree.insert(parent, "end", text=text, tags=tag, open=True)
        return new_item

    def show_message(self, title, message):
        print(title, message)
        messagebox.showinfo(title, message)
        pass

    def set_label(self, label, text):
        label.configure(text=text)

    def set_status(self, text):
        w.label_status.configure(text=text)

    def get_item(self, gui_tree, parent=False):
        item = {}
        if not parent:
            tree_item = gui_tree.focus()
        else:
            tree_item = gui_tree.parent(gui_tree.focus())
        item["id"] = tree_item
        item["text"] = gui_tree.item(tree_item, "text")
        item["tag"] = gui_tree.item(tree_item, "tags")[0]
        print(item)
        return item

    def get_file_to_open(self, title, file_types, last_dir):
        file_name = filedialog.askopenfilename(title=title, filetypes=file_types, initialdir=last_dir)
        return file_name

    def enable_buttons(self, buttons):
        for button in buttons:
            button.configure(state=tk.NORMAL)

    def button_qopen_click(self):
        MyBaseFrame.qopen_click(self, [("Qtractor projects", "*.qtr")], [w.button_qbackup, w.button_qsave])

    def button_aopen_click(self):
        MyBaseFrame.aopen_click(self, [("Ardour projects", "*.ardour")], [w.button_abackup, w.button_asave])

    def button_qbackup_click(self):
        MyBaseFrame.qbackup_click(self)

    def button_abackup_click(self):
        MyBaseFrame.abackup_click(self)

    def button_q_to_a_click(self):
        MyBaseFrame.q_to_a_click(self)

    def button_a_to_q_click(self):
        MyBaseFrame.a_to_q_click(self)

    def button_q_to_a_track_click(self):
        MyBaseFrame.q_to_a_track_click(self)

    def button_a_to_q_track_click(self):
        MyBaseFrame.a_to_q_track_click(self)

    def button_q_to_a_all_click(self):
        MyBaseFrame.q_to_a_all_click(self)

    def button_a_to_q_all_click(self):
        MyBaseFrame.a_to_q_all_click(self)

    def button_qsave_click(self):
        MyBaseFrame.qsave_click(self)

    def button_asave_click(self):
        MyBaseFrame.asave_click(self)


def init(top, gui, *args, **kwargs):
    global w, top_level, root, q
    w = gui
    top_level = top
    root = top
    f = MyTkFrame()
    f.tree_ctrl_qtractor = w.tree_ctrl_qtractor
    f.label_qproject = w.label_qproject
    f.tree_ctrl_ardour = w.tree_ctrl_ardour
    f.label_aproject = w.label_aproject
    f.label_status = w.label_status
    w.button_qopen.bind('<ButtonRelease-1>', lambda e: f.button_qopen_click())
    w.button_qbackup.bind('<ButtonRelease-1>', lambda e: f.button_qbackup_click())
    w.button_qsave.bind('<ButtonRelease-1>', lambda e: f.button_qsave_click())
    w.button_q_to_a.bind('<ButtonRelease-1>', lambda e: f.button_q_to_a_click())
    w.button_q_to_a_track.bind('<ButtonRelease-1>', lambda e: f.button_q_to_a_track_click())
    w.button_q_to_a_all.bind('<ButtonRelease-1>', lambda e: f.button_q_to_a_all_click())
    w.button_aopen.bind('<ButtonRelease-1>', lambda e: f.button_aopen_click())
    w.button_abackup.bind('<ButtonRelease-1>', lambda e: f.button_abackup_click())
    w.button_asave.bind('<ButtonRelease-1>', lambda e: f.button_asave_click())
    w.button_a_to_q.bind('<ButtonRelease-1>', lambda e: f.button_a_to_q_click())
    w.button_a_to_q_track.bind('<ButtonRelease-1>', lambda e: f.button_a_to_q_track_click())
    w.button_a_to_q_all.bind('<ButtonRelease-1>', lambda e: f.button_a_to_q_all_click())


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def run():
    import qapstk
    qapstk.vp_start_gui()


if __name__ == '__main__':
    run()

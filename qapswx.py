#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Sat Sep 21 18:18:43 2019
#

# Copyright (c) 2019 Paolo D'Emilio
#
# This file is part of Qaps.
#
# Qaps is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Qaps is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Qaps.  If not, see <https://www.gnu.org/licenses/>.

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class WxFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: WxFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((972, 765))
        self.button_qopen = wx.Button(self, wx.ID_ANY, "Open Qtractor Project")
        self.button_qbackup = wx.Button(self, wx.ID_ANY, "BACKUP Qtractor Project")
        self.tree_ctrl_qtractor = wx.TreeCtrl(self, wx.ID_ANY)
        self.button_qsave = wx.Button(self, wx.ID_ANY, "Save Qtractor Project")
        self.button_q_to_a = wx.Button(self, wx.ID_ANY, ">")
        self.button_a_to_q = wx.Button(self, wx.ID_ANY, "<")
        self.button_q_to_a_track = wx.Button(self, wx.ID_ANY, ">>")
        self.button_a_to_q_track = wx.Button(self, wx.ID_ANY, "<<")
        self.button_q_to_a_all = wx.Button(self, wx.ID_ANY, ">>>>")
        self.button_a_to_q_all = wx.Button(self, wx.ID_ANY, "<<<<")
        self.button_aopen = wx.Button(self, wx.ID_ANY, "Open Ardour Project")
        self.button_abackup = wx.Button(self, wx.ID_ANY, "BACKUP Ardour Project")
        self.tree_ctrl_ardour = wx.TreeCtrl(self, wx.ID_ANY)
        self.button_asave = wx.Button(self, wx.ID_ANY, "Save Ardour Project")
        self.label_status = wx.StaticText(self, wx.ID_ANY, "Qtractor <-> Ardour Plugin Setter")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.button_qopen_click, self.button_qopen)
        self.Bind(wx.EVT_BUTTON, self.button_qbackup_click, self.button_qbackup)
        self.Bind(wx.EVT_BUTTON, self.button_qsave_click, self.button_qsave)
        self.Bind(wx.EVT_BUTTON, self.button_q_to_a_click, self.button_q_to_a)
        self.Bind(wx.EVT_BUTTON, self.button_a_to_q_click, self.button_a_to_q)
        self.Bind(wx.EVT_BUTTON, self.button_q_to_a_track_click, self.button_q_to_a_track)
        self.Bind(wx.EVT_BUTTON, self.button_a_to_q_track_click, self.button_a_to_q_track)
        self.Bind(wx.EVT_BUTTON, self.button_q_to_a_all_click, self.button_q_to_a_all)
        self.Bind(wx.EVT_BUTTON, self.button_a_to_q_all_click, self.button_a_to_q_all)
        self.Bind(wx.EVT_BUTTON, self.button_aopen_click, self.button_aopen)
        self.Bind(wx.EVT_BUTTON, self.button_abackup_click, self.button_abackup)
        self.Bind(wx.EVT_BUTTON, self.button_asave_click, self.button_asave)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: WxFrame.__set_properties
        self.SetTitle("Qaps")
        self.button_qbackup.Enable(False)
        self.button_qsave.Enable(False)
        self.button_abackup.Enable(False)
        self.button_asave.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: WxFrame.__do_layout
        sizer_0 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(self.button_qopen, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_5.Add(self.button_qbackup, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
        self.label_qproject = wx.StaticText(self, wx.ID_ANY, "")
        sizer_3.Add(self.label_qproject, 0, 0, 0)
        sizer_3.Add(self.tree_ctrl_qtractor, 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_qsave, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        label_1 = wx.StaticText(self, wx.ID_ANY, "\n\n\nPlugin")
        sizer_4.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.button_q_to_a, 0, 0, 0)
        sizer_4.Add(self.button_a_to_q, 0, 0, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "\n\n\nTrack")
        sizer_4.Add(label_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.button_q_to_a_track, 0, 0, 0)
        sizer_4.Add(self.button_a_to_q_track, 0, 0, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, "\n\n\nAll")
        sizer_4.Add(label_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.button_q_to_a_all, 0, 0, 0)
        sizer_4.Add(self.button_a_to_q_all, 0, 0, 0)
        sizer_4.Add((0, 0), 0, 0, 0)
        sizer_1.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_6.Add(self.button_aopen, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_6.Add(self.button_abackup, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)
        self.label_aproject = wx.StaticText(self, wx.ID_ANY, "")
        sizer_2.Add(self.label_aproject, 0, 0, 0)
        sizer_2.Add(self.tree_ctrl_ardour, 1, wx.EXPAND, 0)
        sizer_2.Add(self.button_asave, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_0.Add(sizer_1, 1, wx.EXPAND, 0)
        sizer_0.Add(self.label_status, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_0)
        self.Layout()
        # end wxGlade

    def button_qopen_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_qopen_click' not implemented!")
        event.Skip()

    def button_qbackup_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_qbackup_click' not implemented!")
        event.Skip()

    def button_qsave_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_qsave_click' not implemented!")
        event.Skip()

    def button_q_to_a_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_q_to_a_click' not implemented!")
        event.Skip()

    def button_a_to_q_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_a_to_q_click' not implemented!")
        event.Skip()

    def button_q_to_a_track_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_q_to_a_track_click' not implemented!")
        event.Skip()

    def button_a_to_q_track_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_a_to_q_track_click' not implemented!")
        event.Skip()

    def button_q_to_a_all_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_q_to_a_all_click' not implemented!")
        event.Skip()

    def button_a_to_q_all_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_a_to_q_all_click' not implemented!")
        event.Skip()

    def button_aopen_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_aopen_click' not implemented!")
        event.Skip()

    def button_abackup_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_abackup_click' not implemented!")
        event.Skip()

    def button_asave_click(self, event):  # wxGlade: WxFrame.<event_handler>
        print("Event handler 'button_asave_click' not implemented!")
        event.Skip()

# end of class WxFrame


class MyApp(wx.App):
    frame = None

    def OnInit(self):
        self.frame = WxFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()

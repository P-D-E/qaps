#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Sep 24, 2019  platform: Linux
# ...and then manually modified


# Copyright (c) 2019 Paolo D'Emilio
#
# This file is part of Qaps.
#
# Qaps is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Qaps is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Qaps.  If not, see <https://www.gnu.org/licenses/>.

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import qaps_tk
import platform


val = None
w = None
root = None
w_win = None
rt = None


def vp_start_gui():
    """Starting point when module is the main routine."""
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    qaps_tk.init(root, top)
    root.mainloop()


def create_toplevel1(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    qaps_tk.init(w, top, *args, **kwargs)
    return w, top


def destroy_toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1080x782+586+112")
        top.title("Qaps")
        top.configure(highlightcolor="black")

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="horizontal")
        self.TPanedwindow1.place(x=5, rely=0.0, relheight=0.972, relwidth=0.985)
        self.TPanedwindow1_p1 = ttk.Labelframe(width=405, text='', relief=tk.FLAT)
        self.TPanedwindow1.add(self.TPanedwindow1_p1)
        self.TPanedwindow1_pb = ttk.Frame(width=160, borderwidth=1, relief=tk.GROOVE)
        self.TPanedwindow1.add(self.TPanedwindow1_pb)
        self.TPanedwindow1_p2 = ttk.Labelframe(width=405, text='', relief=tk.FLAT)
        self.TPanedwindow1.add(self.TPanedwindow1_p2)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.button_qopen = tk.Button(self.TPanedwindow1_p1)
        self.button_qopen.place(x=0, rely=0.013, height=31, width=191, bordermode='ignore')
        self.button_qopen.configure(activebackground="#f9f9f9")
        self.button_qopen.configure(text='''Open Qtractor Project''')

        self.button_qbackup = tk.Button(self.TPanedwindow1_p1)
        self.button_qbackup.place(x=190, rely=0.013, height=31, width=191, bordermode='ignore')
        self.button_qbackup.configure(activebackground="#f9f9f9")
        self.button_qbackup.configure(text='''BACKUP Qtractor Project''')
        self.button_qbackup.configure(state=tk.DISABLED)

        self.label_qproject = tk.Label(self.TPanedwindow1_p1)
        self.label_qproject.place(x=0, rely=0.053, height=21, relwidth=0.99, bordermode='ignore')
        self.label_qproject.configure(activebackground="#f9f9f9")
        self.label_qproject.configure(anchor='n')
        self.label_qproject.configure(background="#ececec")
        self.label_qproject.configure(justify='left')
        self.label_qproject.configure(text='''''')

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.tree_ctrl_qtractor = ScrolledTreeView(self.TPanedwindow1_p1)
        self.tree_ctrl_qtractor.place(x=0, rely=0.079, relheight=0.87, relwidth=0.99, bordermode='ignore')
        # build_treeview_support starting.
        self.tree_ctrl_qtractor.configure(show="tree")
        self.tree_ctrl_qtractor.column("#0", width="460")
        self.tree_ctrl_qtractor.column("#0", minwidth="460")
        self.tree_ctrl_qtractor.column("#0", stretch="1")
        self.tree_ctrl_qtractor.column("#0", anchor="w")

        self.button_qsave = tk.Button(self.TPanedwindow1_p1)
        self.button_qsave.place(x=0, rely=0.954, height=31, width=191, bordermode='ignore')
        self.button_qsave.configure(activebackground="#f9f9f9")
        self.button_qsave.configure(text='''Save Qtractor Project''')
        self.button_qsave.configure(state=tk.DISABLED)

        self.label_1 = tk.Label(self.TPanedwindow1_pb)
        self.label_1.place(x=5, y=80, height=31, width=70, bordermode='ignore')
        self.label_1.configure(anchor='n')
        self.label_1.configure(text='''Plugin''')

        self.button_q_to_a = tk.Button(self.TPanedwindow1_pb)
        self.button_q_to_a.place(x=5, y=100, height=31, width=70, bordermode='ignore')
        self.button_q_to_a.configure(activebackground="#f9f9f9")
        self.button_q_to_a.configure(text='''>''')

        self.button_a_to_q = tk.Button(self.TPanedwindow1_pb)
        self.button_a_to_q.place(x=5, y=135, height=31, width=70, bordermode='ignore')
        self.button_a_to_q.configure(activebackground="#f9f9f9")
        self.button_a_to_q.configure(text='''<''')

        self.label_2 = tk.Label(self.TPanedwindow1_pb)
        self.label_2.place(x=5, y=230, height=31, width=70, bordermode='ignore')
        self.label_2.configure(anchor='n')
        self.label_2.configure(text='''Track''')

        self.button_q_to_a_track = tk.Button(self.TPanedwindow1_pb)
        self.button_q_to_a_track.place(x=5, y=250, height=31, width=70, bordermode='ignore')
        self.button_q_to_a_track.configure(activebackground="#f9f9f9")
        self.button_q_to_a_track.configure(text='''>>''')

        self.button_a_to_q_track = tk.Button(self.TPanedwindow1_pb)
        self.button_a_to_q_track.place(x=5, y=285, height=31, width=70, bordermode='ignore')
        self.button_a_to_q_track.configure(activebackground="#f9f9f9")
        self.button_a_to_q_track.configure(text='''<<''')

        self.label_3 = tk.Label(self.TPanedwindow1_pb)
        self.label_3.place(x=5, y=380, height=31, width=70, bordermode='ignore')
        self.label_3.configure(anchor='n')
        self.label_3.configure(text='''All''')

        self.button_q_to_a_all = tk.Button(self.TPanedwindow1_pb)
        self.button_q_to_a_all.place(x=5, y=400, height=31, width=70, bordermode='ignore')
        self.button_q_to_a_all.configure(activebackground="#f9f9f9")
        self.button_q_to_a_all.configure(text='''>>>>''')

        self.button_a_to_q_all = tk.Button(self.TPanedwindow1_pb)
        self.button_a_to_q_all.place(x=5, y=435, height=31, width=70, bordermode='ignore')
        self.button_a_to_q_all.configure(activebackground="#f9f9f9")
        self.button_a_to_q_all.configure(text='''<<<<''')

        self.button_aopen = tk.Button(self.TPanedwindow1_p2)
        self.button_aopen.place(x=0, rely=0.013, height=31, width=191, bordermode='ignore')
        self.button_aopen.configure(activebackground="#f9f9f9")
        self.button_aopen.configure(text='''Open Ardour Project''')

        self.button_abackup = tk.Button(self.TPanedwindow1_p2)
        self.button_abackup.place(x=190, rely=0.013, height=31, width=191, bordermode='ignore')
        self.button_abackup.configure(activebackground="#f9f9f9")
        self.button_abackup.configure(text='''BACKUP Ardour Project''')
        self.button_abackup.configure(state=tk.DISABLED)

        self.label_aproject = tk.Label(self.TPanedwindow1_p2)
        self.label_aproject.place(x=0, rely=0.053, height=21, relwidth=0.99, bordermode='ignore')
        self.label_aproject.configure(activebackground="#f9f9f9")
        self.label_aproject.configure(anchor='n')
        self.label_aproject.configure(background="#ececec")
        self.label_aproject.configure(justify='left')
        self.label_aproject.configure(text='''''')

        self.tree_ctrl_ardour = ScrolledTreeView(self.TPanedwindow1_p2)
        self.tree_ctrl_ardour.place(relx=0.0, rely=0.079, relheight=0.87, relwidth=0.99, bordermode='ignore')
        # build_treeview_support starting.
        self.tree_ctrl_ardour.configure(show="tree")
        self.tree_ctrl_ardour.column("#0", width="460")
        self.tree_ctrl_ardour.column("#0", minwidth="460")
        self.tree_ctrl_ardour.column("#0", stretch="1")
        self.tree_ctrl_ardour.column("#0", anchor="w")

        self.button_asave = tk.Button(self.TPanedwindow1_p2)
        self.button_asave.place(relx=0.0, rely=0.954, height=31, width=191, bordermode='ignore')
        self.button_asave.configure(activebackground="#f9f9f9")
        self.button_asave.configure(text='''Save Ardour Project''')
        self.button_asave.configure(state=tk.DISABLED)

        self.label_status = tk.Label(top)
        self.label_status.place(x=5, rely=0.972, height=21, relwidth=0.99)
        self.label_status.configure(background="#ececec")
        self.label_status.configure(text='''''')

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [485, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        """Hide and show scrollbar as needed."""
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    """Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget."""
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    """A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed."""
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
